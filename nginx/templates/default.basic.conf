# ===============================
# default.basic.conf
# ===============================
# Configuración básica de un API Gateway con NGINX
# que realiza balanceo de carga round-robin entre 2 servidores backend.
#
# Variables de entorno:
# - SERVICE1_HOST: IP o hostname del primer backend
# - SERVICE1_PORT: Puerto del primer backend
# - SERVICE2_HOST: IP o hostname del segundo backend
# - SERVICE2_PORT: Puerto del segundo backend
#
# Este template es ideal para un balanceo simple sin lógica adicional.

# Definición del grupo de servidores backend para balanceo
upstream api_backend {
    # Servidor backend 1
    server ${SERVICE1_HOST}:${SERVICE1_PORT};
    # Servidor backend 2
    server ${SERVICE2_HOST}:${SERVICE2_PORT};

    # Opcional: Puedes agregar más servidores con el mismo formato:
    # server ${SERVICE3_HOST}:${SERVICE3_PORT};
    # server ${SERVICE4_HOST}:${SERVICE4_PORT};

    # El balanceo es round-robin por defecto
    # Para cambiar el método de balanceo puedes usar:
    # least_conn;  # Elige el servidor con menos conexiones activas
    # ip_hash;     # Balancea según IP del cliente (sticky session)
}

server {
    # Escuchar en el puerto 80 (HTTP)
    listen 80;

    # Ubicación raíz: reenvía todas las solicitudes al upstream 'api_backend'
    location / {
        # Proxy pass a grupo upstream
        proxy_pass http://api_backend;

        # Configuración recomendada para pasar headers originales
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Timeout para conectar con el backend (puedes ajustar según necesidad)
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;

        # Buffering de respuesta del backend para mejorar rendimiento
        proxy_buffering on;

        # Manejo de errores para fallos en backend
        proxy_intercept_errors on;

        # Puedes agregar aquí reglas de caché, limitación, autenticación, etc.
    }

    # Opcional: Puedes agregar otras ubicaciones para rutas específicas
    # location /api/v2/ {
    #     proxy_pass http://api_backend_v2;
    # }
}

name: Deploy API Gateway

on:
  push:
    branches: [ dev, qa, test ]

  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Variables de entorno para el servidor remoto, definidas en GitHub Secrets
    env:
      SERVICE1_HOST: ${{ secrets.SERVICE1_HOST }}
      SERVICE1_PORT: ${{ secrets.SERVICE1_PORT }}
      SERVICE2_HOST: ${{ secrets.SERVICE2_HOST }}
      SERVICE2_PORT: ${{ secrets.SERVICE2_PORT }}
      SERVICE3_HOST: ${{ secrets.SERVICE3_HOST }}
      SERVICE3_PORT: ${{ secrets.SERVICE3_PORT }}
      SERVICE4_HOST: ${{ secrets.SERVICE4_HOST }}
      SERVICE4_PORT: ${{ secrets.SERVICE4_PORT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug listar archivos del proyecto
        run: |
          echo "Directorio actual:"
          pwd
          echo "Archivos:"
          ls -la
          echo "Contenido carpeta nginx:"
          ls -la nginx/

      - name: Crear directorio remoto si no existe
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.EC2_USER }}/nginx-gateway-kit

      - name: Copiar archivos a EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            docker-compose.yml
            nginx/Dockerfile
            nginx/entrypoint.sh
            nginx/default.template.conf
            nginx/templates/
          target: /home/${{ secrets.EC2_USER }}/nginx-gateway-kit

      - name: SSH a EC2 y desplegar API Gateway
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: SERVICE1_HOST,SERVICE1_PORT,SERVICE2_HOST,SERVICE2_PORT,SERVICE3_HOST,SERVICE3_PORT,SERVICE4_HOST,SERVICE4_PORT
          script: |
            set -e

            echo "🔍 Verificando instalación de Docker..."
            if ! command -v docker &> /dev/null; then
              echo "📦 Docker no encontrado, instalando..."
              sudo apt-get update -y
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "✅ Docker ya está instalado."
            fi

            echo "🔍 Verificando Docker Compose..."
            if ! docker compose version &> /dev/null; then
              echo "🔧 Docker Compose no encontrado, instalando plugin..."
              sudo apt-get install -y docker-compose-plugin || sudo apt-get install -y docker-compose
            else
              echo "✅ Docker Compose ya está instalado."
            fi

            cd /home/${{ secrets.EC2_USER }}/nginx-gateway-kit

            echo "🛑 Deteniendo contenedores existentes..."
            SERVICE1_HOST=$SERVICE1_HOST SERVICE1_PORT=$SERVICE1_PORT \
            SERVICE2_HOST=$SERVICE2_HOST SERVICE2_PORT=$SERVICE2_PORT \
            SERVICE3_HOST=$SERVICE3_HOST SERVICE3_PORT=$SERVICE3_PORT \
            SERVICE4_HOST=$SERVICE4_HOST SERVICE4_PORT=$SERVICE4_PORT \
            sudo -E docker compose down || echo "No había contenedores activos."

            echo "🔄 Actualizando imágenes (si aplica)..."
            sudo docker compose pull || echo "No se pudieron actualizar imágenes o no es necesario."

            echo "🚀 Levantando nuevos contenedores con variables de entorno..."
            SERVICE1_HOST=$SERVICE1_HOST SERVICE1_PORT=$SERVICE1_PORT \
            SERVICE2_HOST=$SERVICE2_HOST SERVICE2_PORT=$SERVICE2_PORT \
            SERVICE3_HOST=$SERVICE3_HOST SERVICE3_PORT=$SERVICE3_PORT \
            SERVICE4_HOST=$SERVICE4_HOST SERVICE4_PORT=$SERVICE4_PORT \
            sudo -E docker compose up -d --build

            echo "✅ Despliegue completado correctamente."
